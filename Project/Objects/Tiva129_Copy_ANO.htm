<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Tiva129_Copy_ANO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Tiva129_Copy_ANO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Mon Oct 15 22:16:40 2018
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Loop_500Hz &rArr; ANO_DT_Data_Exchange &rArr; ANO_DT_Data_Receive_Anl_Task &rArr; ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[26]">__user_initial_stackheap</a>
 <LI><a href="#[a]">NmiSR</a>
 <LI><a href="#[b]">FaultISR</a>
 <LI><a href="#[c]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">SysCtlDelay</a><BR>
 <LI><a href="#[a]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NmiSR</a><BR>
 <LI><a href="#[b]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">FaultISR</a><BR>
 <LI><a href="#[c]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 111 times from startup_rvmdk.o(RESET)
 <LI><a href="#[2]">Loop_1000Hz</a> from task_scheduler.o(i.Loop_1000Hz) referenced 2 times from task_scheduler.o(.data)
 <LI><a href="#[5]">Loop_100Hz</a> from task_scheduler.o(i.Loop_100Hz) referenced 2 times from task_scheduler.o(.data)
 <LI><a href="#[4]">Loop_200Hz</a> from task_scheduler.o(i.Loop_200Hz) referenced 2 times from task_scheduler.o(.data)
 <LI><a href="#[7]">Loop_20Hz</a> from task_scheduler.o(i.Loop_20Hz) referenced 2 times from task_scheduler.o(.data)
 <LI><a href="#[8]">Loop_2Hz</a> from task_scheduler.o(i.Loop_2Hz) referenced 2 times from task_scheduler.o(.data)
 <LI><a href="#[3]">Loop_500Hz</a> from task_scheduler.o(i.Loop_500Hz) referenced 2 times from task_scheduler.o(.data)
 <LI><a href="#[6]">Loop_50Hz</a> from task_scheduler.o(i.Loop_50Hz) referenced 2 times from task_scheduler.o(.data)
 <LI><a href="#[a]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from drv_time.o(i.SysTick_Handler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[10]">SystemInit</a> from system_tm4c12x.o(i.SystemInit) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[12]">Timer3B_IntHandler</a> from drv_us100.o(i.Timer3B_IntHandler) referenced from drv_us100.o(i.Timer3B_Init)
 <LI><a href="#[e]">UART1_IntHandler</a> from ano_dt.o(i.UART1_IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">Uart2_IntHandler</a> from drv_rc.o(i.Uart2_IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[13]">__main</a> from __main.o(!!!main) referenced from startup_rvmdk.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[16]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11e]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[11f]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[120]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[17]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[121]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[122]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[123]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[124]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[125]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[126]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[127]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[128]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[129]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[130]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[131]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[132]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[133]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[134]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[21]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[138]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[139]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[13a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[13b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[15]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[13c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[19]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[13d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; System_Init &rArr; Para_Data_Init &rArr; Triz_Parame_Read &rArr; Parame_Reset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[27]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[20]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[13f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[22]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[140]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[141]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[a5]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[142]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[143]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[144]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[24]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_Height_Measure
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[26]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[145]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_PID_Init
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>ADCIntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.ADCIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ValueGet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AdcInit
</UL>

<P><STRONG><a name="[29]"></a>ADCIntStatus</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, adc.o(i.ADCIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADCIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ValueGet
</UL>

<P><STRONG><a name="[2c]"></a>ADCProcessorTrigger</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc.o(i.ADCProcessorTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCProcessorTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ValueGet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AdcInit
</UL>

<P><STRONG><a name="[63]"></a>ADCSequenceConfigure</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, adc.o(i.ADCSequenceConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADCSequenceConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AdcInit
</UL>

<P><STRONG><a name="[2b]"></a>ADCSequenceDataGet</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc.o(i.ADCSequenceDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCSequenceDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ValueGet
</UL>

<P><STRONG><a name="[65]"></a>ADCSequenceEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AdcInit
</UL>

<P><STRONG><a name="[64]"></a>ADCSequenceStepConfigure</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, adc.o(i.ADCSequenceStepConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADCSequenceStepConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AdcInit
</UL>

<P><STRONG><a name="[28]"></a>ADC_ValueGet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_adc.o(i.ADC_ValueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_ValueGet &rArr; ADCIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntStatus
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_20Hz
</UL>

<P><STRONG><a name="[2d]"></a>ANO_DT_Data_Exchange</STRONG> (Thumb, 942 bytes, Stack size 48 bytes, ano_dt.o(i.ANO_DT_Data_Exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ANO_DT_Data_Exchange &rArr; ANO_DT_Data_Receive_Anl_Task &rArr; ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Version
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_VER
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_User
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Status
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Speed
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Senser2
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Senser
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_RCData
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Power
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_MotoPWM
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Location
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendParame
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_500Hz
</UL>

<P><STRONG><a name="[41]"></a>ANO_DT_GetParame</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, ano_dt.o(i.ANO_DT_GetParame))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ANO_DT_GetParame
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_ParListToParUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
</UL>

<P><STRONG><a name="[42]"></a>ANO_DT_ParListToParUsed</STRONG> (Thumb, 926 bytes, Stack size 0 bytes, ano_dt.o(i.ANO_DT_ParListToParUsed))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_GetParame
</UL>

<P><STRONG><a name="[44]"></a>ANO_DT_ParUsedToParList</STRONG> (Thumb, 970 bytes, Stack size 0 bytes, ano_dt.o(i.ANO_DT_ParUsedToParList))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendParame
</UL>

<P><STRONG><a name="[40]"></a>ANO_DT_SendCmd</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ano_dt.o(i.ANO_DT_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
</UL>

<P><STRONG><a name="[2f]"></a>ANO_DT_SendParame</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ano_dt.o(i.ANO_DT_SendParame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ANO_DT_SendParame &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_ParUsedToParList
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[45]"></a>ANO_DT_SendString</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ano_dt.o(i.ANO_DT_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Reset
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Rest
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_Data_Offset
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[38]"></a>ANO_DT_Send_Location</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, ano_dt.o(i.ANO_DT_Send_Location))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ANO_DT_Send_Location &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[36]"></a>ANO_DT_Send_MotoPWM</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, ano_dt.o(i.ANO_DT_Send_MotoPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ANO_DT_Send_MotoPWM &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[37]"></a>ANO_DT_Send_Power</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ano_dt.o(i.ANO_DT_Send_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ANO_DT_Send_Power &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[35]"></a>ANO_DT_Send_RCData</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ano_dt.o(i.ANO_DT_Send_RCData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ANO_DT_Send_RCData &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[33]"></a>ANO_DT_Send_Senser</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, ano_dt.o(i.ANO_DT_Send_Senser))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ANO_DT_Send_Senser &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[34]"></a>ANO_DT_Send_Senser2</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ano_dt.o(i.ANO_DT_Send_Senser2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ANO_DT_Send_Senser2 &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[31]"></a>ANO_DT_Send_Speed</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, ano_dt.o(i.ANO_DT_Send_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ANO_DT_Send_Speed &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[30]"></a>ANO_DT_Send_Status</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, ano_dt.o(i.ANO_DT_Send_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ANO_DT_Send_Status &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[32]"></a>ANO_DT_Send_User</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, ano_dt.o(i.ANO_DT_Send_User))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ANO_DT_Send_User &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[39]"></a>ANO_DT_Send_VER</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ano_dt.o(i.ANO_DT_Send_VER))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ANO_DT_Send_VER &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[2e]"></a>ANO_DT_Send_Version</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, ano_dt.o(i.ANO_DT_Send_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ANO_DT_Send_Version &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[3d]"></a>All_PID_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, triz_flyctrl.o(i.All_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = All_PID_Init &rArr; Loc_1level_PID_Init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_PID_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_2level_PID_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_1level_PID_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_2level_PID_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_1level_PID_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triz_Parame_Write
</UL>

<P><STRONG><a name="[4c]"></a>Alt_1level_Ctrl</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, triz_altctrl.o(i.Alt_1level_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Alt_1level_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_100Hz
</UL>

<P><STRONG><a name="[49]"></a>Alt_1level_PID_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, triz_altctrl.o(i.Alt_1level_PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
</UL>

<P><STRONG><a name="[4e]"></a>Alt_2level_Ctrl</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, triz_altctrl.o(i.Alt_2level_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Alt_2level_Ctrl &rArr; Auto_Take_Off_Land_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_calculate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Take_Off_Land_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_100Hz
</UL>

<P><STRONG><a name="[4a]"></a>Alt_2level_PID_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, triz_altctrl.o(i.Alt_2level_PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
</UL>

<P><STRONG><a name="[50]"></a>Att_1level_Ctrl</STRONG> (Thumb, 554 bytes, Stack size 16 bytes, triz_attctrl.o(i.Att_1level_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Att_1level_Ctrl &rArr; ctrl_parameter_change_task
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_parameter_change_task
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_1000Hz
</UL>

<P><STRONG><a name="[47]"></a>Att_1level_PID_Init</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, triz_attctrl.o(i.Att_1level_PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
</UL>

<P><STRONG><a name="[52]"></a>Att_2level_Ctrl</STRONG> (Thumb, 1320 bytes, Stack size 16 bytes, triz_attctrl.o(i.Att_2level_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Att_2level_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_deadzone
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_100Hz
</UL>

<P><STRONG><a name="[48]"></a>Att_2level_PID_Init</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, triz_attctrl.o(i.Att_2level_PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
</UL>

<P><STRONG><a name="[4f]"></a>Auto_Take_Off_Land_Task</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, triz_altctrl.o(i.Auto_Take_Off_Land_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Auto_Take_Off_Land_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_key_take_off_task
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_2level_Ctrl
</UL>

<P><STRONG><a name="[55]"></a>Bluetooth_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ano_dt.o(i.Bluetooth_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bluetooth_Init &rArr; Uart1_Init &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[57]"></a>Capture_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_rc.o(i.Capture_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Capture_Init &rArr; Uart2_Init &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[6d]"></a>Center_Pos_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_icm20602.o(i.Center_Pos_Set))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Reg_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Copy_Para2fc
</UL>

<P><STRONG><a name="[59]"></a>Drv_AK8975CSPin_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_ak8975.o(i.Drv_AK8975CSPin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Drv_AK8975CSPin_Init &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[5d]"></a>Drv_AK8975_Read</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_ak8975.o(i.Drv_AK8975_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_AK8975_Read &rArr; ak8975_Trig &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_RW
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak8975_enable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak8975_Trig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fc_Sensor_Get
</UL>

<P><STRONG><a name="[61]"></a>Drv_AdcInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, drv_adc.o(i.Drv_AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Drv_AdcInit &rArr; GPIOPinTypeADC &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[66]"></a>Drv_Icm20602CSPin_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_icm20602.o(i.Drv_Icm20602CSPin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Drv_Icm20602CSPin_Init &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[67]"></a>Drv_Icm20602Reg_Init</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, drv_icm20602.o(i.Drv_Icm20602Reg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Drv_Icm20602Reg_Init &rArr; icm20602_set_gyro_fullscale &rArr; icm20602_write_reg &rArr; SPI2_write_reg &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_write_reg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_set_gyro_fullscale
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_set_accel_fullscale
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Center_Pos_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[6e]"></a>Drv_Icm20602_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_icm20602.o(i.Drv_Icm20602_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Drv_Icm20602_Read &rArr; icm20602_read_buffer &rArr; SPI2_read_reg_buffer &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fc_Sensor_Get
</UL>

<P><STRONG><a name="[70]"></a>Drv_LED_1ms</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, drv_led.o(i.Drv_LED_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Drv_LED_1ms &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_1000Hz
</UL>

<P><STRONG><a name="[74]"></a>Drv_LED_Breath</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, drv_led.o(i.Drv_LED_Breath))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Drv_LED_Breath &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Task
</UL>

<P><STRONG><a name="[79]"></a>Drv_LED_Flash</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, drv_led.o(i.Drv_LED_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Drv_LED_Flash
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Task
</UL>

<P><STRONG><a name="[7a]"></a>Drv_LED_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, drv_led.o(i.Drv_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Drv_LED_Init &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[7b]"></a>Drv_LED_Task</STRONG> (Thumb, 1536 bytes, Stack size 32 bytes, drv_led.o(i.Drv_LED_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Drv_LED_Task &rArr; Drv_LED_Breath &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_cnt_res_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Flash
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Breath
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_100Hz
</UL>

<P><STRONG><a name="[7d]"></a>Drv_SPI2_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drv_spi.o(i.Drv_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Drv_SPI2_Init &rArr; SSIConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[5f]"></a>Drv_SPI2_RW</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_spi.o(i.Drv_SPI2_RW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_write_reg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_read_reg_buffer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_read_reg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak8975_Trig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975_Read
</UL>

<P><STRONG><a name="[86]"></a>Drv_SPL06CSPin_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_spl06.o(i.Drv_SPL06CSPin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Drv_SPL06CSPin_Init &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[87]"></a>Drv_Spl0601_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, drv_spl06.o(i.Drv_Spl0601_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Drv_Spl0601_Init &rArr; spl0601_rateset &rArr; spl0601_write &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_start_continuous
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_calib_param
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[8c]"></a>Drv_Spl0601_Read</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, drv_spl06.o(i.Drv_Spl0601_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Drv_Spl0601_Read &rArr; spl0601_get_temperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_temp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_pressure
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fc_Sensor_Get
</UL>

<P><STRONG><a name="[91]"></a>Fc_Sensor_Get</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, triz_flightdatacal.o(i.Fc_Sensor_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Fc_Sensor_Get &rArr; Drv_Spl0601_Read &rArr; spl0601_get_temperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Read
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602_Read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_1000Hz
</UL>

<P><STRONG><a name="[92]"></a>Flight_Mode_Set</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, triz_flyctrl.o(i.Flight_Mode_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flight_Mode_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Mode_Switch
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_100Hz
</UL>

<P><STRONG><a name="[95]"></a>Flight_State_Task</STRONG> (Thumb, 822 bytes, Stack size 32 bytes, triz_flyctrl.o(i.Flight_State_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Flight_State_Task &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length_limit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Data_Reset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_discriminat
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_deadzone
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_1000Hz
</UL>

<P><STRONG><a name="[99]"></a>GPIODirModeSet</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
</UL>

<P><STRONG><a name="[9a]"></a>GPIOPadConfigSet</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
</UL>

<P><STRONG><a name="[7e]"></a>GPIOPinConfigure</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>

<P><STRONG><a name="[62]"></a>GPIOPinTypeADC</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypeADC &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AdcInit
</UL>

<P><STRONG><a name="[5b]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPL06CSPin_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602CSPin_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975CSPin_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_HeightMeasure_Init
</UL>

<P><STRONG><a name="[9b]"></a>GPIOPinTypePWM</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[7f]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_Init
</UL>

<P><STRONG><a name="[9c]"></a>GPIOPinTypeTimer</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypeTimer &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>

<P><STRONG><a name="[9d]"></a>GPIOPinTypeUART</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[5c]"></a>GPIOPinWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_Height_Measure
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_1ms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPL06CSPin_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl06_enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_write_reg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_reg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_buffer
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602CSPin_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975CSPin_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak8975_enable
</UL>

<P><STRONG><a name="[a7]"></a>GetSysTime_us</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drv_time.o(i.GetSysTime_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSysTime_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_1000Hz
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[9e]"></a>ICM_Data_Offset</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, drv_icm20602.o(i.ICM_Data_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM_Data_Offset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_save
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Prepare
</UL>

<P><STRONG><a name="[9f]"></a>IMU_Update_Task</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, triz_flightdatacal.o(i.IMU_Update_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = IMU_Update_Task &rArr; IMU_update &rArr; mag_yaw_calculate &rArr; vec_3dh_transition &rArr; simple_3d_trans &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_1000Hz
</UL>

<P><STRONG><a name="[a0]"></a>IMU_update</STRONG> (Thumb, 2348 bytes, Stack size 64 bytes, ano_imu.o(i.IMU_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = IMU_update &rArr; mag_yaw_calculate &rArr; vec_3dh_transition &rArr; simple_3d_trans &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt_reciprocal
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w2h_2d_trans
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_yaw_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Update_Task
</UL>

<P><STRONG><a name="[e4]"></a>IntEnable</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>

<P><STRONG><a name="[a4]"></a>IntMasterEnable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>

<P><STRONG><a name="[eb]"></a>IntRegister</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, interrupt.o(i.IntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
</UL>

<P><STRONG><a name="[101]"></a>LED_Bright_Rest</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drv_led.o(i.LED_Bright_Rest))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_cnt_res_check
</UL>

<P><STRONG><a name="[ae]"></a>Loc_1level_Ctrl</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, triz_locctrl.o(i.Loc_1level_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_100Hz
</UL>

<P><STRONG><a name="[4b]"></a>Loc_1level_PID_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, triz_locctrl.o(i.Loc_1level_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Loc_1level_PID_Init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
</UL>

<P><STRONG><a name="[b3]"></a>Mag_Data_Deal_Task</STRONG> (Thumb, 914 bytes, Stack size 32 bytes, triz_magprocess.o(i.Mag_Data_Deal_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mag_Data_Deal_Task &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_save
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Cal_Z
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Cal_XY
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Cal_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Update_Task
</UL>

<P><STRONG><a name="[b8]"></a>Mag_Get</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, drv_ak8975.o(i.Mag_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Mag_Get &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Update_Task
</UL>

<P><STRONG><a name="[b2]"></a>Mag_Update_Task</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, triz_flightdatacal.o(i.Mag_Update_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Mag_Update_Task &rArr; Mag_Get &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Get
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_50Hz
</UL>

<P><STRONG><a name="[ab]"></a>Motor_Ctrl_Task</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, triz_motorctrl.o(i.Motor_Ctrl_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor_Ctrl_Task &rArr; PWM_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_1000Hz
</UL>

<P><STRONG><a name="[e9]"></a>Moving_Average</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, ano_filter.o(i.Moving_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Moving_Average
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_IntHandler
</UL>

<P><STRONG><a name="[3c]"></a>PID_Rest</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, triz_fcparameter.o(i.PID_Rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PID_Rest &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triz_Parame_Read
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
</UL>

<P><STRONG><a name="[4d]"></a>PID_calculate</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, ano_pid.o(i.PID_calculate))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_2level_Ctrl
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_1level_Ctrl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_2level_Ctrl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_1level_Ctrl
</UL>

<P><STRONG><a name="[be]"></a>PWMClockSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMClockSet))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[bf]"></a>PWMGenConfigure</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pwm.o(i.PWMGenConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMGenConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[c2]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenEnable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[c0]"></a>PWMGenPeriodSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[c3]"></a>PWMOutputState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[c1]"></a>PWMPulseWidthSet</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, pwm.o(i.PWMPulseWidthSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWMPulseWidthSet
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[bd]"></a>PWM_Init</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, drv_pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWM_Init &rArr; GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMClockSet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[bc]"></a>PWM_Set</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, drv_pwm.o(i.PWM_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl_Task
</UL>

<P><STRONG><a name="[c4]"></a>Para_Data_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, triz_fcdata.o(i.Para_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Para_Data_Init &rArr; Triz_Parame_Read &rArr; Parame_Reset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triz_Parame_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[3f]"></a>Parame_Reset</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, triz_fcparameter.o(i.Parame_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Parame_Reset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Copy_Para2fc
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triz_Parame_Read
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
</UL>

<P><STRONG><a name="[b1]"></a>Power_UpdateTask</STRONG> (Thumb, 362 bytes, Stack size 0 bytes, triz_power.o(i.Power_UpdateTask))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_20Hz
</UL>

<P><STRONG><a name="[ac]"></a>RC_duty_task</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, drv_rc.o(i.RC_duty_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RC_duty_task &rArr; stick_function &rArr; stick_function_check
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_safe_check
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_watch_dog
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_100Hz
</UL>

<P><STRONG><a name="[cc]"></a>Rc_DataProcess</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, drv_rc.o(i.Rc_DataProcess))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc_ValueGet
</UL>

<P><STRONG><a name="[cb]"></a>Rc_ValueGet</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, drv_rc.o(i.Rc_ValueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rc_ValueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc_DataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_IntHandler
</UL>

<P><STRONG><a name="[cd]"></a>SPI2_read_reg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_icm20602.o(i.SPI2_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI2_read_reg &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_reg
</UL>

<P><STRONG><a name="[ce]"></a>SPI2_read_reg_buffer</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_icm20602.o(i.SPI2_read_reg_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI2_read_reg_buffer &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_buffer
</UL>

<P><STRONG><a name="[cf]"></a>SPI2_write_reg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_icm20602.o(i.SPI2_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI2_write_reg &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_write_reg
</UL>

<P><STRONG><a name="[84]"></a>SSIBusy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIBusy))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_RW
</UL>

<P><STRONG><a name="[80]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 86 bytes, Stack size 36 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_Init
</UL>

<P><STRONG><a name="[85]"></a>SSIDataGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_RW
</UL>

<P><STRONG><a name="[82]"></a>SSIDataGetNonBlocking</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_Init
</UL>

<P><STRONG><a name="[83]"></a>SSIDataPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPut))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_RW
</UL>

<P><STRONG><a name="[81]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_Init
</UL>

<P><STRONG><a name="[d0]"></a>Scheduler_Run</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, task_scheduler.o(i.Scheduler_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Scheduler_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>Scheduler_Setup</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, task_scheduler.o(i.Scheduler_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>Sensor_Data_Prepare</STRONG> (Thumb, 962 bytes, Stack size 16 bytes, drv_icm20602.o(i.Sensor_Data_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sensor_Data_Prepare &rArr; ICM_Data_Offset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_auto_az
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionless_check
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_Data_Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_1000Hz
</UL>

<P><STRONG><a name="[fc]"></a>Set_Att_1level_Ki</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, triz_attctrl.o(i.Set_Att_1level_Ki))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_parameter_change_task
</UL>

<P><STRONG><a name="[fd]"></a>Set_Att_2level_Ki</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, triz_attctrl.o(i.Set_Att_2level_Ki))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_parameter_change_task
</UL>

<P><STRONG><a name="[aa]"></a>Swtich_State_Task</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, triz_flyctrl.o(i.Swtich_State_Task))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_1000Hz
</UL>

<P><STRONG><a name="[d4]"></a>SysCtlClockFreqSet</STRONG> (Thumb, 664 bytes, Stack size 48 bytes, sysctl.o(i.SysCtlClockFreqSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SysCtlClockFreqSet &rArr; _SysCtlFrequencyGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysCtlMemTimingGet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysCtlFrequencyGet
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5a]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPL06CSPin_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602CSPin_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975CSPin_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AdcInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_HeightMeasure_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>

<P><STRONG><a name="[d9]"></a>SysTickEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[da]"></a>SysTickIntEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[d8]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[d7]"></a>SysTick_Configuration</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_time.o(i.SysTick_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[d1]"></a>SysTick_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_time.o(i.SysTick_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_Run
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_time.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_tm4c12x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SystemInit &rArr; SysCtlClockFreqSet &rArr; _SysCtlFrequencyGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockFreqSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>Timer3B_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_us100.o(i.Timer3B_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Timer3B_Init &rArr; TimerIntRegister &rArr; _TimerIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPrescaleSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlEvent
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_HeightMeasure_Init
</UL>

<P><STRONG><a name="[12]"></a>Timer3B_IntHandler</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, drv_us100.o(i.Timer3B_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Timer3B_IntHandler &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlEvent
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_us100.o(i.Timer3B_Init)
</UL>
<P><STRONG><a name="[df]"></a>TimerConfigure</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>

<P><STRONG><a name="[e0]"></a>TimerControlEvent</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(i.TimerControlEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerControlEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_IntHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>

<P><STRONG><a name="[e5]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>

<P><STRONG><a name="[e6]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_IntHandler
</UL>

<P><STRONG><a name="[e3]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>

<P><STRONG><a name="[e2]"></a>TimerIntRegister</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, timer.o(i.TimerIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TimerIntRegister &rArr; _TimerIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TimerIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>

<P><STRONG><a name="[e1]"></a>TimerPrescaleSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.TimerPrescaleSet))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>

<P><STRONG><a name="[e7]"></a>TimerValueGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_IntHandler
</UL>

<P><STRONG><a name="[c5]"></a>Triz_Parame_Read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, triz_fcparameter.o(i.Triz_Parame_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Triz_Parame_Read &rArr; Parame_Reset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Reset
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Rest
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triz_Parame_Write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Copy_Para2fc
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Data_Init
</UL>

<P><STRONG><a name="[e]"></a>UART1_IntHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ano_dt.o(i.UART1_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Prepare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>UARTCharGetNonBlocking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UARTCharGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_IntHandler
</UL>

<P><STRONG><a name="[f7]"></a>UARTCharPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_putbuff
</UL>

<P><STRONG><a name="[f2]"></a>UARTCharsAvail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharsAvail))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_IntHandler
</UL>

<P><STRONG><a name="[f3]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UARTConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[f4]"></a>UARTDisable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(i.UARTDisable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[f5]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UARTEnable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[ef]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_IntHandler
</UL>

<P><STRONG><a name="[f6]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
</UL>

<P><STRONG><a name="[ee]"></a>UARTIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_IntHandler
</UL>

<P><STRONG><a name="[dd]"></a>US100_HeightMeasure_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_us100.o(i.US100_HeightMeasure_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = US100_HeightMeasure_Init &rArr; Timer3B_Init &rArr; TimerIntRegister &rArr; _TimerIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[b0]"></a>US100_Height_Measure</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_us100.o(i.US100_Height_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = US100_Height_Measure
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_100Hz
</UL>

<P><STRONG><a name="[56]"></a>Uart1_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, drv_uart.o(i.Uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart1_Init &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Init
</UL>

<P><STRONG><a name="[46]"></a>Uart1_putbuff</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_uart.o(i.Uart1_putbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>

<P><STRONG><a name="[58]"></a>Uart2_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, drv_uart.o(i.Uart2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart2_Init &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capture_Init
</UL>

<P><STRONG><a name="[f]"></a>Uart2_IntHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_rc.o(i.Uart2_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart2_IntHandler &rArr; Rc_ValueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc_ValueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>WCZ_Acc_Get_Task</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, triz_flightdatacal.o(i.WCZ_Acc_Get_Task))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_1000Hz
</UL>

<P><STRONG><a name="[f8]"></a>WCZ_Data_Calc</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, ano_motioncal.o(i.WCZ_Data_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WCZ_Data_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_deadzone
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inte_fix_filter
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_inte_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Fus_Task
</UL>

<P><STRONG><a name="[98]"></a>WCZ_Data_Reset</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ano_motioncal.o(i.WCZ_Data_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
</UL>

<P><STRONG><a name="[af]"></a>WCZ_Fus_Task</STRONG> (Thumb, 420 bytes, Stack size 8 bytes, triz_flightdatacal.o(i.WCZ_Fus_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WCZ_Fus_Task &rArr; WCZ_Data_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Data_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_100Hz
</UL>

<P><STRONG><a name="[23]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_uart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ad]"></a>calculate_RPY</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, ano_imu.o(i.calculate_RPY))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = calculate_RPY &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_100Hz
</UL>

<P><STRONG><a name="[c9]"></a>ch_watch_dog</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, drv_rc.o(i.ch_watch_dog))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_duty_task
</UL>

<P><STRONG><a name="[51]"></a>ctrl_parameter_change_task</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, triz_flyctrl.o(i.ctrl_parameter_change_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ctrl_parameter_change_task
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Att_2level_Ki
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Att_1level_Ki
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_1level_Ctrl
</UL>

<P><STRONG><a name="[3e]"></a>data_save</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, triz_fcdata.o(i.data_save))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_Data_Offset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
</UL>

<P><STRONG><a name="[69]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_time.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms &rArr; delay_us &rArr; GetSysTime_us
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Reg_Init
</UL>

<P><STRONG><a name="[fe]"></a>delay_us</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drv_time.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_us &rArr; GetSysTime_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime_us
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[ff]"></a>fail_safe</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, drv_rc.o(i.fail_safe))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_safe_check
</UL>

<P><STRONG><a name="[ca]"></a>fail_safe_check</STRONG> (Thumb, 200 bytes, Stack size 4 bytes, drv_rc.o(i.fail_safe_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fail_safe_check
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_duty_task
</UL>

<P><STRONG><a name="[fb]"></a>fast_atan2</STRONG> (Thumb, 350 bytes, Stack size 4 bytes, ano_math.o(i.fast_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fast_atan2
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_RPY
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_yaw_calculate
</UL>

<P><STRONG><a name="[fa]"></a>fix_inte_filter</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, ano_filter.o(i.fix_inte_filter))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Data_Calc
</UL>

<P><STRONG><a name="[6f]"></a>icm20602_read_buffer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_icm20602.o(i.icm20602_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icm20602_read_buffer &rArr; SPI2_read_reg_buffer &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_read_reg_buffer
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602_Read
</UL>

<P><STRONG><a name="[6a]"></a>icm20602_read_reg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_icm20602.o(i.icm20602_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icm20602_read_reg &rArr; SPI2_read_reg &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_read_reg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Reg_Init
</UL>

<P><STRONG><a name="[6b]"></a>icm20602_set_accel_fullscale</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, drv_icm20602.o(i.icm20602_set_accel_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icm20602_set_accel_fullscale &rArr; icm20602_write_reg &rArr; SPI2_write_reg &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Reg_Init
</UL>

<P><STRONG><a name="[6c]"></a>icm20602_set_gyro_fullscale</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, drv_icm20602.o(i.icm20602_set_gyro_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icm20602_set_gyro_fullscale &rArr; icm20602_write_reg &rArr; SPI2_write_reg &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Reg_Init
</UL>

<P><STRONG><a name="[68]"></a>icm20602_write_reg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drv_icm20602.o(i.icm20602_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icm20602_write_reg &rArr; SPI2_write_reg &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_write_reg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_set_gyro_fullscale
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_set_accel_fullscale
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Reg_Init
</UL>

<P><STRONG><a name="[f9]"></a>inte_fix_filter</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, ano_filter.o(i.inte_fix_filter))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Data_Calc
</UL>

<P><STRONG><a name="[97]"></a>land_discriminat</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, triz_flyctrl.o(i.land_discriminat))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
</UL>

<P><STRONG><a name="[7c]"></a>led_cnt_res_check</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, drv_led.o(i.led_cnt_res_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = led_cnt_res_check
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Bright_Rest
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Task
</UL>

<P><STRONG><a name="[96]"></a>length_limit</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ano_math.o(i.length_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = length_limit &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
</UL>

<P><STRONG><a name="[a3]"></a>mag_yaw_calculate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ano_imu.o(i.mag_yaw_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mag_yaw_calculate &rArr; vec_3dh_transition &rArr; simple_3d_trans &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_3dh_transition
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_update
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = main &rArr; System_Init &rArr; Para_Data_Init &rArr; Triz_Parame_Read &rArr; Parame_Reset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_Setup
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_Run
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d2]"></a>motionless_check</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, drv_icm20602.o(i.motionless_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motionless_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Prepare
</UL>

<P><STRONG><a name="[d3]"></a>mpu_auto_az</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, drv_icm20602.o(i.mpu_auto_az))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpu_auto_az &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Prepare
</UL>

<P><STRONG><a name="[100]"></a>my_abs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ano_math.o(i.my_abs))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan2
</UL>

<P><STRONG><a name="[53]"></a>my_deadzone</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ano_math.o(i.my_deadzone))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_2level_Ctrl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Data_Calc
</UL>

<P><STRONG><a name="[b7]"></a>my_sqrt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ano_math.o(i.my_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt_reciprocal
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length_limit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_RPY
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_auto_az
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_3d_trans
</UL>

<P><STRONG><a name="[a1]"></a>my_sqrt_reciprocal</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ano_math.o(i.my_sqrt_reciprocal))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_update
</UL>

<P><STRONG><a name="[54]"></a>one_key_take_off_task</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, triz_flyctrl.o(i.one_key_take_off_task))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Take_Off_Land_Task
</UL>

<P><STRONG><a name="[104]"></a>simple_3d_trans</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, ano_filter.o(i.simple_3d_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = simple_3d_trans &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_3dh_transition
</UL>

<P><STRONG><a name="[c8]"></a>stick_function</STRONG> (Thumb, 332 bytes, Stack size 20 bytes, drv_rc.o(i.stick_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stick_function &rArr; stick_function_check
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function_check_longpress
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_duty_task
</UL>

<P><STRONG><a name="[109]"></a>stick_function_check</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, drv_rc.o(i.stick_function_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stick_function_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function
</UL>

<P><STRONG><a name="[108]"></a>stick_function_check_longpress</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_rc.o(i.stick_function_check_longpress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stick_function_check_longpress
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function
</UL>

<P><STRONG><a name="[c7]"></a>unlock</STRONG> (Thumb, 462 bytes, Stack size 20 bytes, drv_rc.o(i.unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = unlock &rArr; stick_function_check_longpress
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function_check_longpress
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_duty_task
</UL>

<P><STRONG><a name="[102]"></a>vec_3dh_transition</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ano_filter.o(i.vec_3dh_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vec_3dh_transition &rArr; simple_3d_trans &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_3d_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_yaw_calculate
</UL>

<P><STRONG><a name="[a2]"></a>w2h_2d_trans</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ano_imu.o(i.w2h_2d_trans))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_update
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_IntHandler
</UL>

<P><STRONG><a name="[10a]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Breath
</UL>

<P><STRONG><a name="[10d]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[113]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Breath
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_IntHandler
</UL>

<P><STRONG><a name="[110]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Get
</UL>

<P><STRONG><a name="[111]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Get
</UL>

<P><STRONG><a name="[150]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_1ms
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Flash
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Breath
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_IntHandler
</UL>

<P><STRONG><a name="[151]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_1ms
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Breath
</UL>

<P><STRONG><a name="[112]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[116]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Breath
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Get
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3B_IntHandler
</UL>

<P><STRONG><a name="[114]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10c]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[10f]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_1ms
</UL>

<P><STRONG><a name="[115]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Breath
</UL>

<P><STRONG><a name="[117]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Get
</UL>

<P><STRONG><a name="[119]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
</UL>

<P><STRONG><a name="[11a]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[11b]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[18]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[152]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[153]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[10b]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3b]"></a>ANO_DT_Data_Receive_Anl</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, ano_dt.o(i.ANO_DT_Data_Receive_Anl))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_save
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Reset
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Rest
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendCmd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_GetParame
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl_Task
</UL>

<P><STRONG><a name="[3a]"></a>ANO_DT_Data_Receive_Anl_Task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ano_dt.o(i.ANO_DT_Data_Receive_Anl_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ANO_DT_Data_Receive_Anl_Task &rArr; ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[f1]"></a>ANO_DT_Data_Receive_Prepare</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, ano_dt.o(i.ANO_DT_Data_Receive_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntHandler
</UL>

<P><STRONG><a name="[43]"></a>ANO_DT_Send_Data</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ano_dt.o(i.ANO_DT_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_putbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Version
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_VER
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_User
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Status
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Speed
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Senser2
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Senser
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_RCData
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Power
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_MotoPWM
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Location
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendParame
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendCmd
</UL>

<P><STRONG><a name="[2]"></a>Loop_1000Hz</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, task_scheduler.o(i.Loop_1000Hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Loop_1000Hz &rArr; IMU_Update_Task &rArr; IMU_update &rArr; mag_yaw_calculate &rArr; vec_3dh_transition &rArr; simple_3d_trans &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Acc_Get_Task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swtich_State_Task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Prepare
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl_Task
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Update_Task
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime_us
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fc_Sensor_Get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_1ms
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_1level_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_scheduler.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Loop_100Hz</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, task_scheduler.o(i.Loop_100Hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Loop_100Hz &rArr; Drv_LED_Task &rArr; Drv_LED_Breath &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_RPY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Fus_Task
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_Height_Measure
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_duty_task
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_Ctrl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Mode_Set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_2level_Ctrl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_2level_Ctrl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_1level_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_scheduler.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Loop_200Hz</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_scheduler.o(i.Loop_200Hz))
<BR>[Address Reference Count : 1]<UL><LI> task_scheduler.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Loop_20Hz</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task_scheduler.o(i.Loop_20Hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Loop_20Hz &rArr; ADC_ValueGet &rArr; ADCIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_UpdateTask
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ValueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_scheduler.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Loop_2Hz</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_scheduler.o(i.Loop_2Hz))
<BR>[Address Reference Count : 1]<UL><LI> task_scheduler.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Loop_500Hz</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, task_scheduler.o(i.Loop_500Hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Loop_500Hz &rArr; ANO_DT_Data_Exchange &rArr; ANO_DT_Data_Receive_Anl_Task &rArr; ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_scheduler.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Loop_50Hz</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, task_scheduler.o(i.Loop_50Hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Loop_50Hz &rArr; Mag_Update_Task &rArr; Mag_Get &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Update_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_scheduler.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>LED_Switch</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, triz_flyctrl.o(i.LED_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Mode_Set
</UL>

<P><STRONG><a name="[94]"></a>Speed_Mode_Switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, triz_flyctrl.o(i.Speed_Mode_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Mode_Set
</UL>

<P><STRONG><a name="[ed]"></a>Parame_Copy_Fc2para</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, triz_fcparameter.o(i.Parame_Copy_Fc2para))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triz_Parame_Write
</UL>

<P><STRONG><a name="[c6]"></a>Parame_Copy_Para2fc</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, triz_fcparameter.o(i.Parame_Copy_Para2fc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Parame_Copy_Para2fc
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Center_Pos_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triz_Parame_Read
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Reset
</UL>

<P><STRONG><a name="[ec]"></a>Triz_Parame_Write</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, triz_fcparameter.o(i.Triz_Parame_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Triz_Parame_Write &rArr; All_PID_Init &rArr; Loc_1level_PID_Init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Copy_Fc2para
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triz_Parame_Read
</UL>

<P><STRONG><a name="[b5]"></a>Mag_Cal_Reset</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, triz_magprocess.o(i.Mag_Cal_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
</UL>

<P><STRONG><a name="[b4]"></a>Mag_Cal_XY</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, triz_magprocess.o(i.Mag_Cal_XY))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
</UL>

<P><STRONG><a name="[b6]"></a>Mag_Cal_Z</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, triz_magprocess.o(i.Mag_Cal_Z))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
</UL>

<P><STRONG><a name="[60]"></a>ak8975_Trig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_ak8975.o(i.ak8975_Trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ak8975_Trig &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_RW
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak8975_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975_Read
</UL>

<P><STRONG><a name="[5e]"></a>ak8975_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_ak8975.o(i.ak8975_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ak8975_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak8975_Trig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975_Read
</UL>

<P><STRONG><a name="[89]"></a>spl0601_get_calib_param</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, drv_spl06.o(i.spl0601_get_calib_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spl0601_get_calib_param &rArr; spl0601_read &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Init
</UL>

<P><STRONG><a name="[90]"></a>spl0601_get_pressure</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, drv_spl06.o(i.spl0601_get_pressure))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Read
</UL>

<P><STRONG><a name="[8f]"></a>spl0601_get_raw_pressure</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, drv_spl06.o(i.spl0601_get_raw_pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spl0601_get_raw_pressure &rArr; spl0601_read &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Read
</UL>

<P><STRONG><a name="[8d]"></a>spl0601_get_raw_temp</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, drv_spl06.o(i.spl0601_get_raw_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spl0601_get_raw_temp &rArr; spl0601_read &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Read
</UL>

<P><STRONG><a name="[8e]"></a>spl0601_get_temperature</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, drv_spl06.o(i.spl0601_get_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spl0601_get_temperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Read
</UL>

<P><STRONG><a name="[8a]"></a>spl0601_rateset</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, drv_spl06.o(i.spl0601_rateset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spl0601_rateset &rArr; spl0601_write &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Init
</UL>

<P><STRONG><a name="[88]"></a>spl0601_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_spl06.o(i.spl0601_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spl0601_read &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl06_enable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_temp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_pressure
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_calib_param
</UL>

<P><STRONG><a name="[8b]"></a>spl0601_start_continuous</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_spl06.o(i.spl0601_start_continuous))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spl0601_start_continuous &rArr; spl0601_write &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Init
</UL>

<P><STRONG><a name="[106]"></a>spl0601_write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_spl06.o(i.spl0601_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spl0601_write &rArr; Drv_SPI2_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl06_enable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_start_continuous
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
</UL>

<P><STRONG><a name="[107]"></a>spl06_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_spl06.o(i.spl06_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spl06_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>

<P><STRONG><a name="[db]"></a>sys_time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_time.o(i.sys_time))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d6]"></a>_SysCtlFrequencyGet</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, sysctl.o(i._SysCtlFrequencyGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _SysCtlFrequencyGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockFreqSet
</UL>

<P><STRONG><a name="[d5]"></a>_SysCtlMemTimingGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i._SysCtlMemTimingGet))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockFreqSet
</UL>

<P><STRONG><a name="[ea]"></a>_TimerIntNumberGet</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, timer.o(i._TimerIntNumberGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _TimerIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
</UL>

<P><STRONG><a name="[a]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>System_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = System_Init &rArr; Para_Data_Init &rArr; Triz_Parame_Read &rArr; Parame_Reset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; Uart1_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Data_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPL06CSPin_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPI2_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LED_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Reg_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602CSPin_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capture_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975CSPin_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AdcInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_HeightMeasure_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[10e]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
